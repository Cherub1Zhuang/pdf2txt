Attention Is All You Need arXiv cs CL Dec Ashish Vaswani Google Brain Noam Shazeer Google Brain Niki Parmar Google Research Jakob Uszkoreit Google Research avaswani google com noam google com nikip google com usz google com Llion Jones Google Research Aidan Gomez University of Toronto ukasz Kaiser Google Brain llion google com aidan cs toronto edu lukaszkaiser google com Illia Polosukhin illia polosukhin gmail com Abstract The dominant sequence transduction models are based on complex recurrent or convolutional neural networks that include an encoder and decoder The best performing models also connect the encoder and decoder through an attention mechanism We propose new simple network architecture the Transformer based solely on attention mechanisms dispensing with recurrence and convolutions entirely Experiments on two machine translation tasks show these models to be superior in quality while being more parallelizable and requiring significantly less time to train Our model achieves BLEU on the WMT English to German translation task improving over the existing best results including ensembles by over BLEU On the WMT English to French translation task our model establishes new single model state of the art BLEU score of after training for days on eight GPUs small fraction of the training costs of the best models from the literature We show that the Transformer generalizes well to other tasks by applying it successfully to English constituency parsing both with large and limited training data Introduction Recurrent neural networks long short term memory and gated recurrent neural networks in particular have been firmly established as state of the art approaches in sequence modeling and Equal contribution Listing order is random Jakob proposed replacing RNNs with self attention and started the effort to evaluate this idea Ashish with Illia designed and implemented the first Transformer models and has been crucially involved in every aspect of this work Noam proposed scaled dot product attention multi head attention and the parameter free position representation and became the other person involved in nearly every detail Niki designed implemented tuned and evaluated countless model variants in our original codebase and tensor tensor Llion also experimented with novel model variants was responsible for our initial codebase and efficient inference and visualizations Lukasz and Aidan spent countless long days designing various parts of and implementing tensor tensor replacing our earlier codebase greatly improving results and massively accelerating our research Work performed while at Google Brain Work performed while at Google Research st Conference on Neural Information Processing Systems NIPS Long Beach CA USA transduction problems such as language modeling and machine translation Numerous efforts have since continued to push the boundaries of recurrent language models and encoder decoder architectures Recurrent models typically factor computation along the symbol positions of the input and output sequences Aligning the positions to steps in computation time they generate sequence of hidden states ht as function of the previous hidden state ht and the input for position This inherently sequential nature precludes parallelization within training examples which becomes critical at longer sequence lengths as memory constraints limit batching across examples Recent work has achieved significant improvements in computational efficiency through factorization tricks and conditional computation while also improving model performance in case of the latter The fundamental constraint of sequential computation however remains Attention mechanisms have become an integral part of compelling sequence modeling and transduc tion models in various tasks allowing modeling of dependencies without regard to their distance in the input or output sequences In all but few cases however such attention mechanisms are used in conjunction with recurrent network In this work we propose the Transformer model architecture eschewing recurrence and instead relying entirely on an attention mechanism to draw global dependencies between input and output The Transformer allows for significantly more parallelization and can reach new state of the art in translation quality after being trained for as little as twelve hours on eight GPUs Background The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU ByteNet and ConvS all of which use convolutional neural networks as basic building block computing hidden representations in parallel for all input and output positions In these models the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions linearly for ConvS and logarithmically for ByteNet This makes it more difficult to learn dependencies between distant positions In the Transformer this is reduced to constant number of operations albeit at the cost of reduced effective resolution due to averaging attention weighted positions an effect we counteract with Multi Head Attention as described in section Self attention sometimes called intra attention is an attention mechanism relating different positions of single sequence in order to compute representation of the sequence Self attention has been used successfully in variety of tasks including reading comprehension abstractive summarization textual entailment and learning task independent sentence representations End to end memory networks are based on recurrent attention mechanism instead of sequence aligned recurrence and have been shown to perform well on simple language question answering and language modeling tasks To the best of our knowledge however the Transformer is the first transduction model relying entirely on self attention to compute representations of its input and output without using sequence aligned RNNs or convolution In the following sections we will describe the Transformer motivate self attention and discuss its advantages over models such as and Model Architecture Most competitive neural sequence transduction models have an encoder decoder structure Here the encoder maps an input sequence of symbol representations xn to sequence of continuous representations zn Given the decoder then generates an output sequence ym of symbols one element at time At each step the model is auto regressive consuming the previously generated symbols as additional input when generating the next The Transformer follows this overall architecture using stacked self attention and point wise fully connected layers for both the encoder and decoder shown in the left and right halves of Figure respectively Figure The Transformer model architecture Encoder and Decoder Stacks Encoder The encoder is composed of stack of identical layers Each layer has two sub layers The first is multi head self attention mechanism and the second is simple position wise fully connected feed forward network We employ residual connection around each of the two sub layers followed by layer normalization That is the output of each sub layer is LayerNorm Sublayer where Sublayer is the function implemented by the sub layer itself To facilitate these residual connections all sub layers in the model as well as the embedding layers produce outputs of dimension dmodel Decoder The decoder is also composed of stack of identical layers In addition to the two sub layers in each encoder layer the decoder inserts third sub layer which performs multi head attention over the output of the encoder stack Similar to the encoder we employ residual connections around each of the sub layers followed by layer normalization We also modify the self attention sub layer in the decoder stack to prevent positions from attending to subsequent positions This masking combined with fact that the output embeddings are offset by one position ensures that the predictions for position can depend only on the known outputs at positions less than Attention An attention function can be described as mapping query and set of key value pairs to an output where the query keys values and output are all vectors The output is computed as weighted sum of the values where the weight assigned to each value is computed by compatibility function of the query with the corresponding key Scaled Dot Product Attention Multi Head Attention Figure left Scaled Dot Product Attention right Multi Head Attention consists of several attention layers running in parallel Scaled Dot Product Attention We call our particular attention Scaled Dot Product Attention Figure The input consists of queries and keys of dimension dk and values of dimension dv We compute the dot products of the query with all keys divide each by dk and apply softmax function to obtain the weights on the values In practice we compute the attention function on set of queries simultaneously packed together into matrix The keys and values are also packed together into matrices and We compute the matrix of outputs as Attention softmax QKT dk The two most commonly used attention functions are additive attention and dot product multi plicative attention Dot product attention is identical to our algorithm except for the scaling factor of dk Additive attention computes the compatibility function using feed forward network with single hidden layer While the two are similar in theoretical complexity dot product attention is much faster and more space efficient in practice since it can be implemented using highly optimized matrix multiplication code While for small values of dk the two mechanisms perform similarly additive attention outperforms dot product attention without scaling for larger values of dk We suspect that for large values of dk the dot products grow large in magnitude pushing the softmax function into regions where it has extremely small gradients To counteract this effect we scale the dot products by dk Multi Head Attention Instead of performing single attention function with dmodel dimensional keys values and queries we found it beneficial to linearly project the queries keys and values times with different learned linear projections to dk dk and dv dimensions respectively On each of these projected versions of queries keys and values we then perform the attention function in parallel yielding dv dimensional output values These are concatenated and once again projected resulting in the final values as depicted in Figure To illustrate why the dot products get large assume that the components of and are independent random variables with mean and variance Then their dot product dk qiki has mean and variance dk Multi head attention allows the model to jointly attend to information from different representation subspaces at different positions With single attention head averaging inhibits this MultiHead Concat head headh WO where headi Attention QWQ KW Where the projections are parameter matrices WQ Rdmodel dk WK Rdmodel dk WV Rdmodel dv and WO Rhdv dmodel In this work we employ parallel attention layers or heads For each of these we use dk dv dmodel Due to the reduced dimension of each head the total computational cost is similar to that of single head attention with full dimensionality Applications of Attention in our Model The Transformer uses multi head attention in three different ways In encoder decoder attention layers the queries come from the previous decoder layer and the memory keys and values come from the output of the encoder This allows every position in the decoder to attend over all positions in the input sequence This mimics the typical encoder decoder attention mechanisms in sequence to sequence models such as The encoder contains self attention layers In self attention layer all of the keys values and queries come from the same place in this case the output of the previous layer in the encoder Each position in the encoder can attend to all positions in the previous layer of the encoder Similarly self attention layers in the decoder allow each position in the decoder to attend to all positions in the decoder up to and including that position We need to prevent leftward information flow in the decoder to preserve the auto regressive property We implement this inside of scaled dot product attention by masking out setting to all values in the input of the softmax which correspond to illegal connections See Figure Position wise Feed Forward Networks In addition to attention sub layers each of the layers in our encoder and decoder contains fully connected feed forward network which is applied to each position separately and identically This consists of two linear transformations with ReLU activation in between FFN max xW While the linear transformations are the same across different positions they use different parameters from layer to layer Another way of describing this is as two convolutions with kernel size The dimensionality of input and output is dmodel and the inner layer has dimensionality dff Embeddings and Softmax Similarly to other sequence transduction models we use learned embeddings to convert the input tokens and output tokens to vectors of dimension dmodel We also use the usual learned linear transfor mation and softmax function to convert the decoder output to predicted next token probabilities In our model we share the same weight matrix between the two embedding layers and the pre softmax linear transformation similar to In the embedding layers we multiply those weights by dmodel Positional Encoding Since our model contains no recurrence and no convolution in order for the model to make use of the order of the sequence we must inject some information about the relative or absolute position of the Table Maximum path lengths per layer complexity and minimum number of sequential operations for different layer types is the sequence length is the representation dimension is the kernel size of convolutions and the size of the neighborhood in restricted self attention Layer Type Complexity per Layer Sequential Maximum Path Length Operations Self Attention Recurrent Convolutional logk Self Attention restricted tokens in the sequence To this end we add positional encodings to the input embeddings at the bottoms of the encoder and decoder stacks The positional encodings have the same dimension dmodel as the embeddings so that the two can be summed There are many choices of positional encodings learned and fixed In this work we use sine and cosine functions of different frequencies PE pos sin pos dmodel PE pos cos pos dmodel where pos is the position and is the dimension That is each dimension of the positional encoding corresponds to sinusoid The wavelengths form geometric progression from to We chose this function because we hypothesized it would allow the model to easily learn to attend by relative positions since for any fixed offset PEpos can be represented as linear function of PEpos We also experimented with using learned positional embeddings instead and found that the two versions produced nearly identical results see Table row We chose the sinusoidal version because it may allow the model to extrapolate to sequence lengths longer than the ones encountered during training Why Self Attention In this section we compare various aspects of self attention layers to the recurrent and convolu tional layers commonly used for mapping one variable length sequence of symbol representations xn to another sequence of equal length zn with xi zi Rd such as hidden layer in typical sequence transduction encoder or decoder Motivating our use of self attention we consider three desiderata One is the total computational complexity per layer Another is the amount of computation that can be parallelized as measured by the minimum number of sequential operations required The third is the path length between long range dependencies in the network Learning long range dependencies is key challenge in many sequence transduction tasks One key factor affecting the ability to learn such dependencies is the length of the paths forward and backward signals have to traverse in the network The shorter these paths between any combination of positions in the input and output sequences the easier it is to learn long range dependencies Hence we also compare the maximum path length between any two input and output positions in networks composed of the different layer types As noted in Table self attention layer connects all positions with constant number of sequentially executed operations whereas recurrent layer requires sequential operations In terms of computational complexity self attention layers are faster than recurrent layers when the sequence length is smaller than the representation dimensionality which is most often the case with sentence representations used by state of the art models in machine translations such as word piece and byte pair representations To improve computational performance for tasks involving very long sequences self attention could be restricted to considering only neighborhood of size in the input sequence centered around the respective output position This would increase the maximum path length to We plan to investigate this approach further in future work single convolutional layer with kernel width does not connect all pairs of input and output positions Doing so requires stack of convolutional layers in the case of contiguous kernels or logk in the case of dilated convolutions increasing the length of the longest paths between any two positions in the network Convolutional layers are generally more expensive than recurrent layers by factor of Separable convolutions however decrease the complexity considerably to Even with however the complexity of separable convolution is equal to the combination of self attention layer and point wise feed forward layer the approach we take in our model As side benefit self attention could yield more interpretable models We inspect attention distributions from our models and present and discuss examples in the appendix Not only do individual attention heads clearly learn to perform different tasks many appear to exhibit behavior related to the syntactic and semantic structure of the sentences Training This section describes the training regime for our models Training Data and Batching We trained on the standard WMT English German dataset consisting of about million sentence pairs Sentences were encoded using byte pair encoding which has shared source target vocabulary of about tokens For English French we used the significantly larger WMT English French dataset consisting of sentences and split tokens into word piece vocabulary Sentence pairs were batched together by approximate sequence length Each training batch contained set of sentence pairs containing approximately source tokens and target tokens Hardware and Schedule We trained our models on one machine with NVIDIA GPUs For our base models using the hyperparameters described throughout the paper each training step took about seconds We trained the base models for total of steps or hours For our big models described on the bottom line of table step time was seconds The big models were trained for steps days Optimizer We used the Adam optimizer with and We varied the learning rate over the course of training according to the formula lrate model min step num step num warmup steps This corresponds to increasing the learning rate linearly for the first warmup steps training steps and decreasing it thereafter proportionally to the inverse square root of the step number We used warmup steps Regularization We employ three types of regularization during training Residual Dropout We apply dropout to the output of each sub layer before it is added to the sub layer input and normalized In addition we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks For the base model we use rate of Pdrop Table The Transformer achieves better BLEU scores than previous state of the art models on the English to German and English to French newstest tests at fraction of the training cost Model BLEU Training Cost FLOPs EN DE EN FR EN DE EN FR ByteNet Deep Att PosUnk GNMT RL ConvS MoE Deep Att PosUnk Ensemble GNMT RL Ensemble ConvS Ensemble Transformer base model Transformer big Label Smoothing During training we employed label smoothing of value ls This hurts perplexity as the model learns to be more unsure but improves accuracy and BLEU score Results Machine Translation On the WMT English to German translation task the big transformer model Transformer big in Table outperforms the best previously reported models including ensembles by more than BLEU establishing new state of the art BLEU score of The configuration of this model is listed in the bottom line of Table Training took days on GPUs Even our base model surpasses all previously published models and ensembles at fraction of the training cost of any of the competitive models On the WMT English to French translation task our big model achieves BLEU score of outperforming all of the previously published single models at less than the training cost of the previous state of the art model The Transformer big model trained for English to French used dropout rate Pdrop instead of For the base models we used single model obtained by averaging the last checkpoints which were written at minute intervals For the big models we averaged the last checkpoints We used beam search with beam size of and length penalty These hyperparameters were chosen after experimentation on the development set We set the maximum output length during inference to input length but terminate early when possible Table summarizes our results and compares our translation quality and training costs to other model architectures from the literature We estimate the number of floating point operations used to train model by multiplying the training time the number of GPUs used and an estimate of the sustained single precision floating point capacity of each GPU Model Variations To evaluate the importance of different components of the Transformer we varied our base model in different ways measuring the change in performance on English to German translation on the development set newstest We used beam search as described in the previous section but no checkpoint averaging We present these results in Table In Table rows we vary the number of attention heads and the attention key and value dimensions keeping the amount of computation constant as described in Section While single head attention is BLEU worse than the best setting quality also drops off with too many heads We used values of and TFLOPS for and respectively Table Variations on the Transformer architecture Unlisted values are identical to those of the base model All metrics are on the English to German translation development set newstest Listed perplexities are per wordpiece according to our byte pair encoding and should not be compared to per word perplexities dmodel dff dk dv Pdrop ls train steps PPL BLEU params dev dev base positional embedding instead of sinusoids big Table The Transformer generalizes well to English constituency parsing Results are on Section of WSJ Parser Training WSJ Vinyals Kaiser el al Petrov et al Zhu et al Dyer et al WSJ only discriminative WSJ only discriminative WSJ only discriminative WSJ only discriminative Transformer layers WSJ only discriminative Zhu et al Huang Harper McClosky et al Vinyals Kaiser el al semi supervised semi supervised semi supervised semi supervised Transformer layers semi supervised Luong et al Dyer et al multi task generative In Table rows we observe that reducing the attention key size dk hurts model quality This suggests that determining compatibility is not easy and that more sophisticated compatibility function than dot product may be beneficial We further observe in rows and that as expected bigger models are better and dropout is very helpful in avoiding over fitting In row we replace our sinusoidal positional encoding with learned positional embeddings and observe nearly identical results to the base model English Constituency Parsing To evaluate if the Transformer can generalize to other tasks we performed experiments on English constituency parsing This task presents specific challenges the output is subject to strong structural constraints and is significantly longer than the input Furthermore RNN sequence to sequence models have not been able to attain state of the art results in small data regimes We trained layer transformer with dmodel on the Wall Street Journal WSJ portion of the Penn Treebank about training sentences We also trained it in semi supervised setting using the larger high confidence and BerkleyParser corpora from with approximately sentences We used vocabulary of tokens for the WSJ only setting and vocabulary of tokens for the semi supervised setting We performed only small number of experiments to select the dropout both attention and residual section learning rates and beam size on the Section development set all other parameters remained unchanged from the English to German base translation model During inference we increased the maximum output length to input length We used beam size of and for both WSJ only and the semi supervised setting Our results in Table show that despite the lack of task specific tuning our model performs sur prisingly well yielding better results than all previously reported models with the exception of the Recurrent Neural Network Grammar In contrast to RNN sequence to sequence models the Transformer outperforms the Berkeley Parser even when training only on the WSJ training set of sentences Conclusion In this work we presented the Transformer the first sequence transduction model based entirely on attention replacing the recurrent layers most commonly used in encoder decoder architectures with multi headed self attention For translation tasks the Transformer can be trained significantly faster than architectures based on recurrent or convolutional layers On both WMT English to German and WMT English to French translation tasks we achieve new state of the art In the former task our best model outperforms even all previously reported ensembles We are excited about the future of attention based models and plan to apply them to other tasks We plan to extend the Transformer to problems involving input and output modalities other than text and to investigate local restricted attention mechanisms to efficiently handle large inputs and outputs such as images audio and video Making generation less sequential is another research goals of ours The code we used to train and evaluate our models is available at https github com tensorflow tensor tensor Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful comments corrections and inspiration References Jimmy Lei Ba Jamie Ryan Kiros and Geoffrey Hinton Layer normalization arXiv preprint arXiv Dzmitry Bahdanau Kyunghyun Cho and Yoshua Bengio Neural machine translation by jointly learning to align and translate CoRR abs Denny Britz Anna Goldie Minh Thang Luong and Quoc Le Massive exploration of neural machine translation architectures CoRR abs Jianpeng Cheng Li Dong and Mirella Lapata Long short term memory networks for machine reading arXiv preprint arXiv Kyunghyun Cho Bart van Merrienboer Caglar Gulcehre Fethi Bougares Holger Schwenk and Yoshua Bengio Learning phrase representations using rnn encoder decoder for statistical machine translation CoRR abs Francois Chollet Xception Deep learning with depthwise separable convolutions arXiv preprint arXiv Junyoung Chung aglar ehre Kyunghyun Cho and Yoshua Bengio Empirical evaluation of gated recurrent neural networks on sequence modeling CoRR abs Chris Dyer Adhiguna Kuncoro Miguel Ballesteros and Noah Smith Recurrent neural network grammars In Proc of NAACL Jonas Gehring Michael Auli David Grangier Denis Yarats and Yann Dauphin Convolu tional sequence to sequence learning arXiv preprint arXiv Alex Graves Generating sequences with recurrent neural networks arXiv preprint arXiv Kaiming He Xiangyu Zhang Shaoqing Ren and Jian Sun Deep residual learning for im age recognition In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition pages Sepp Hochreiter Yoshua Bengio Paolo Frasconi and rgen Schmidhuber Gradient flow in recurrent nets the difficulty of learning long term dependencies Sepp Hochreiter and rgen Schmidhuber Long short term memory Neural computation Zhongqiang Huang and Mary Harper Self training PCFG grammars with latent annotations across languages In Proceedings of the Conference on Empirical Methods in Natural Language Processing pages ACL August Rafal Jozefowicz Oriol Vinyals Mike Schuster Noam Shazeer and Yonghui Wu Exploring the limits of language modeling arXiv preprint arXiv ukasz Kaiser and Samy Bengio Can active memory replace attention In Advances in Neural Information Processing Systems NIPS ukasz Kaiser and Ilya Sutskever Neural GPUs learn algorithms In International Conference on Learning Representations ICLR Nal Kalchbrenner Lasse Espeholt Karen Simonyan Aaron van den Oord Alex Graves and Ko ray Kavukcuoglu Neural machine translation in linear time arXiv preprint arXiv Yoon Kim Carl Denton Luong Hoang and Alexander Rush Structured attention networks In International Conference on Learning Representations Diederik Kingma and Jimmy Ba Adam method for stochastic optimization In ICLR Oleksii Kuchaiev and Boris Ginsburg Factorization tricks for LSTM networks arXiv preprint arXiv Zhouhan Lin Minwei Feng Cicero Nogueira dos Santos Mo Yu Bing Xiang Bowen Zhou and Yoshua Bengio structured self attentive sentence embedding arXiv preprint arXiv Minh Thang Luong Quoc Le Ilya Sutskever Oriol Vinyals and Lukasz Kaiser Multi task sequence to sequence learning arXiv preprint arXiv Minh Thang Luong Hieu Pham and Christopher Manning Effective approaches to attention based neural machine translation arXiv preprint arXiv Mitchell Marcus Mary Ann Marcinkiewicz and Beatrice Santorini Building large annotated corpus of english The penn treebank Computational linguistics David McClosky Eugene Charniak and Mark Johnson Effective self training for parsing In Proceedings of the Human Language Technology Conference of the NAACL Main Conference pages ACL June Ankur Parikh Oscar ckstr Dipanjan Das and Jakob Uszkoreit decomposable attention model In Empirical Methods in Natural Language Processing Romain Paulus Caiming Xiong and Richard Socher deep reinforced model for abstractive summarization arXiv preprint arXiv Slav Petrov Leon Barrett Romain Thibaux and Dan Klein Learning accurate compact and interpretable tree annotation In Proceedings of the st International Conference on Computational Linguistics and th Annual Meeting of the ACL pages ACL July Ofir Press and Lior Wolf Using the output embedding to improve language models arXiv preprint arXiv Rico Sennrich Barry Haddow and Alexandra Birch Neural machine translation of rare words with subword units arXiv preprint arXiv Noam Shazeer Azalia Mirhoseini Krzysztof Maziarz Andy Davis Quoc Le Geoffrey Hinton and Jeff Dean Outrageously large neural networks The sparsely gated mixture of experts layer arXiv preprint arXiv Nitish Srivastava Geoffrey Hinton Alex Krizhevsky Ilya Sutskever and Ruslan Salakhutdi nov Dropout simple way to prevent neural networks from overfitting Journal of Machine Learning Research Sainbayar Sukhbaatar Arthur Szlam Jason Weston and Rob Fergus End to end memory networks In Cortes Lawrence Lee Sugiyama and Garnett editors Advances in Neural Information Processing Systems pages Curran Associates Inc Ilya Sutskever Oriol Vinyals and Quoc VV Le Sequence to sequence learning with neural networks In Advances in Neural Information Processing Systems pages Christian Szegedy Vincent Vanhoucke Sergey Ioffe Jonathon Shlens and Zbigniew Wojna Rethinking the inception architecture for computer vision CoRR abs Vinyals Kaiser Koo Petrov Sutskever and Hinton Grammar as foreign language In Advances in Neural Information Processing Systems Yonghui Wu Mike Schuster Zhifeng Chen Quoc Le Mohammad Norouzi Wolfgang Macherey Maxim Krikun Yuan Cao Qin Gao Klaus Macherey et al Google neural machine translation system Bridging the gap between human and machine translation arXiv preprint arXiv Jie Zhou Ying Cao Xuguang Wang Peng Li and Wei Xu Deep recurrent models with fast forward connections for neural machine translation CoRR abs Muhua Zhu Yue Zhang Wenliang Chen Min Zhang and Jingbo Zhu Fast and accurate shift reduce constituent parsing In Proceedings of the st Annual Meeting of the ACL Volume Long Papers pages ACL August Input Input Layer Attention Visualizations passed new laws since making the registration or voting process more difficult EOS pad pad pad pad pad pad It is in this spirit that majority of American governments have It is in this spirit that majority of American governments have passed new laws since making the registration or voting process more difficult EOS pad pad pad pad pad pad Figure An example of the attention mechanism following long distance dependencies in the encoder self attention in layer of Many of the attention heads attend to distant dependency of the verb making completing the phrase making more difficult Attentions here shown only for the word making Different colors represent different heads Best viewed in color Input Input Layer The Law will never be perfect but its application should be just this is what we are missing in my opinion EOS pad will be perfect but its application should be Input Input Layer just this is what we are missing in my opinion EOS pad The Law will never be perfect but its application should be just this is what we are missing in my opinion EOS pad The Law will never be perfect but its application should be just this is what we are missing in my opinion EOS pad Figure Two attention heads also in layer of apparently involved in anaphora resolution Top Full attentions for head Bottom Isolated attentions from just the word its for attention heads and Note that the attentions are very sharp for this word Input Input Layer The Law will never be perfect but its application should be just this is what we are missing in my opinion EOS pad The Law will never be perfect but its application should be Input Input Layer just this is what we are missing in my opinion EOS pad The Law will never be perfect but its application should be just this is what we are missing in my opinion EOS pad The Law will never be perfect but its application should be just this is what we are missing in my opinion EOS pad Figure Many of the attention heads exhibit behaviour that seems related to the structure of the sentence We give two such examples above from two different heads from the encoder self attention at layer of The heads clearly learned to perform different tasks 